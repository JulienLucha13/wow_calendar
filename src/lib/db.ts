import { neon } from "@neondatabase/serverless";

// Interface pour les √©v√©nements en base de donn√©es
export interface DbEvent {
  id?: number;
  date: string;
  user_name: string;
  user_color: string;
  time?: string; // Nouveau champ pour l'heure
  created_at?: Date;
}

// Interface pour les √©v√©nements dans l'application
export interface DayEvent {
  date: string;
  user: {
    name: string;
    color: string;
  };
  time?: string; // Nouveau champ pour l'heure
}

// Fonction pour obtenir la connexion SQL
function getSql() {
  console.log("üîß getSql() appel√©");
  console.log("DATABASE_URL d√©fini:", !!process.env.DATABASE_URL);

  if (!process.env.DATABASE_URL) {
    console.error("‚ùå DATABASE_URL n'est pas d√©fini");
    throw new Error(
      "DATABASE_URL n'est pas d√©fini dans les variables d'environnement"
    );
  }

  console.log("‚úÖ Connexion SQL cr√©√©e");
  return neon(process.env.DATABASE_URL);
}

// Initialisation de la base de donn√©es
export async function initDatabase() {
  console.log("üîß initDatabase() appel√©");
  try {
    const sql = getSql();
    console.log("‚úÖ Connexion SQL obtenue");

    // V√©rifier si la table existe d√©j√†
    console.log("üìù V√©rification de l'existence de la table events...");
    const tableExists = await sql`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'events'
      );
    `;

    if (tableExists[0]?.exists) {
      console.log("‚úÖ La table events existe d√©j√†");
    } else {
      console.log("üìù Cr√©ation de la table events...");
      await sql`
        CREATE TABLE events (
          id SERIAL PRIMARY KEY,
          date VARCHAR(10) NOT NULL,
          user_name VARCHAR(50) NOT NULL,
          user_color VARCHAR(20) NOT NULL,
          time VARCHAR(5) DEFAULT '12:00',
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          UNIQUE(date, user_name)
        )
      `;
      console.log("‚úÖ Table events cr√©√©e avec succ√®s");
    }

    console.log("‚úÖ Base de donn√©es initialis√©e avec succ√®s");
  } catch (error) {
    console.error(
      "‚ùå Erreur lors de l'initialisation de la base de donn√©es:",
      error
    );
    console.error(
      "Stack trace:",
      error instanceof Error ? error.stack : "Pas de stack trace"
    );
    throw error;
  }
}

// Fonctions pour manipuler les √©v√©nements
export async function getAllEvents(): Promise<DayEvent[]> {
  console.log("üîß getAllEvents() appel√©");
  try {
    const sql = getSql();
    console.log("‚úÖ Connexion SQL obtenue");

    console.log("üìù Ex√©cution de la requ√™te SELECT...");
    const events = (await sql`
      SELECT id, date, user_name, user_color, time, created_at
      FROM events
      ORDER BY date ASC, created_at ASC
    `) as DbEvent[];

    console.log(
      `‚úÖ ${events.length} √©v√©nements r√©cup√©r√©s de la base de donn√©es:`,
      events
    );

    const mappedEvents = events.map((event) => ({
      date: event.date,
      user: {
        name: event.user_name,
        color: event.user_color,
      },
      time: event.time || "12:00",
    }));

    console.log("‚úÖ √âv√©nements mapp√©s:", mappedEvents);
    return mappedEvents;
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des √©v√©nements:", error);
    console.error(
      "Stack trace:",
      error instanceof Error ? error.stack : "Pas de stack trace"
    );
    throw error;
  }
}

export async function addEvent(
  date: string,
  userName: string,
  userColor: string,
  time: string = "12:00"
): Promise<void> {
  console.log("üîß addEvent() appel√© avec:", {
    date,
    userName,
    userColor,
    time,
  });
  try {
    const sql = getSql();
    console.log("‚úÖ Connexion SQL obtenue");

    console.log("üìù Ex√©cution de la requ√™te INSERT...");
    await sql`
      INSERT INTO events (date, user_name, user_color, time)
      VALUES (${date}, ${userName}, ${userColor}, ${time})
      ON CONFLICT (date, user_name) DO UPDATE SET
        user_color = EXCLUDED.user_color,
        time = EXCLUDED.time
    `;
    console.log("‚úÖ √âv√©nement ajout√© avec succ√®s");
  } catch (error) {
    console.error("‚ùå Erreur lors de l'ajout de l'√©v√©nement:", error);
    console.error(
      "Stack trace:",
      error instanceof Error ? error.stack : "Pas de stack trace"
    );
    throw error;
  }
}

export async function removeEvent(
  date: string,
  userName: string
): Promise<void> {
  console.log("üîß removeEvent() appel√© avec:", { date, userName });
  try {
    const sql = getSql();
    console.log("‚úÖ Connexion SQL obtenue");

    console.log("üìù Ex√©cution de la requ√™te DELETE...");
    await sql`
      DELETE FROM events
      WHERE date = ${date} AND user_name = ${userName}
    `;
    console.log("‚úÖ √âv√©nement supprim√© avec succ√®s");
  } catch (error) {
    console.error("‚ùå Erreur lors de la suppression de l'√©v√©nement:", error);
    console.error(
      "Stack trace:",
      error instanceof Error ? error.stack : "Pas de stack trace"
    );
    throw error;
  }
}

export async function saveAllEvents(events: DayEvent[]): Promise<void> {
  console.log("üîß saveAllEvents() appel√© avec:", events);
  try {
    const sql = getSql();
    console.log("‚úÖ Connexion SQL obtenue");

    // D'abord nettoyer les anciens √©v√©nements
    await cleanupOldEvents();

    // Supprimer tous les √©v√©nements existants
    console.log("üìù Suppression de tous les √©v√©nements existants...");
    await sql`DELETE FROM events`;
    console.log("‚úÖ Tous les √©v√©nements supprim√©s");

    // Ajouter tous les nouveaux √©v√©nements avec des requ√™tes pr√©par√©es
    if (events.length > 0) {
      console.log("üìù Insertion des nouveaux √©v√©nements...");

      // Utiliser des requ√™tes pr√©par√©es pour chaque √©v√©nement
      for (const event of events) {
        console.log("üìù Insertion de l'√©v√©nement:", event);
        await sql`
          INSERT INTO events (date, user_name, user_color, time)
          VALUES (${event.date}, ${event.user.name}, ${event.user.color}, ${
          event.time || "12:00"
        })
        `;
      }

      console.log(`‚úÖ ${events.length} √©v√©nements ins√©r√©s avec succ√®s`);
    } else {
      console.log("‚ÑπÔ∏è Aucun √©v√©nement √† ins√©rer");
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de la sauvegarde des √©v√©nements:", error);
    console.error(
      "Stack trace:",
      error instanceof Error ? error.stack : "Pas de stack trace"
    );
    throw error;
  }
}

// Fonction pour supprimer les √©v√©nements de plus de 2 semaines
export async function cleanupOldEvents(): Promise<void> {
  console.log("üîß cleanupOldEvents() appel√©");
  try {
    const sql = getSql();
    console.log("‚úÖ Connexion SQL obtenue");

    // Calculer la date limite (2 semaines en arri√®re)
    const twoWeeksAgo = new Date();
    twoWeeksAgo.setDate(twoWeeksAgo.getDate() - 14);
    const limitDate = twoWeeksAgo.toISOString().split("T")[0];

    console.log(`üìù Suppression des √©v√©nements ant√©rieurs au ${limitDate}...`);

    const result = await sql`
      DELETE FROM events
      WHERE date < ${limitDate}
    `;

    console.log("‚úÖ Nettoyage des anciens √©v√©nements termin√©");
  } catch (error) {
    console.error("‚ùå Erreur lors du nettoyage des anciens √©v√©nements:", error);
    console.error(
      "Stack trace:",
      error instanceof Error ? error.stack : "Pas de stack trace"
    );
    throw error;
  }
}
