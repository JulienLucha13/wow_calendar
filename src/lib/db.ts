import { neon } from "@neondatabase/serverless";

// Interface pour les √©v√©nements en base de donn√©es
export interface DbEvent {
  id?: number;
  date: string;
  user_name: string;
  user_color: string;
  created_at?: Date;
}

// Interface pour les √©v√©nements dans l'application
export interface DayEvent {
  date: string;
  user: {
    name: string;
    color: string;
  };
}

// Fonction pour obtenir la connexion SQL
function getSql() {
  console.log("üîß getSql() appel√©");
  console.log("DATABASE_URL d√©fini:", !!process.env.DATABASE_URL);

  if (!process.env.DATABASE_URL) {
    console.error("‚ùå DATABASE_URL n'est pas d√©fini");
    throw new Error(
      "DATABASE_URL n'est pas d√©fini dans les variables d'environnement"
    );
  }

  console.log("‚úÖ Connexion SQL cr√©√©e");
  return neon(process.env.DATABASE_URL);
}

// Initialisation de la base de donn√©es
export async function initDatabase() {
  console.log("üîß initDatabase() appel√©");
  try {
    const sql = getSql();
    console.log("‚úÖ Connexion SQL obtenue");

    // Cr√©er la table events si elle n'existe pas
    console.log("üìù Cr√©ation de la table events...");
    await sql`
      CREATE TABLE IF NOT EXISTS events (
        id SERIAL PRIMARY KEY,
        date VARCHAR(10) NOT NULL,
        user_name VARCHAR(50) NOT NULL,
        user_color VARCHAR(20) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(date, user_name)
      )
    `;

    console.log("‚úÖ Base de donn√©es initialis√©e avec succ√®s");
  } catch (error) {
    console.error(
      "‚ùå Erreur lors de l'initialisation de la base de donn√©es:",
      error
    );
    console.error(
      "Stack trace:",
      error instanceof Error ? error.stack : "Pas de stack trace"
    );
    throw error;
  }
}

// Fonctions pour manipuler les √©v√©nements
export async function getAllEvents(): Promise<DayEvent[]> {
  console.log("üîß getAllEvents() appel√©");
  try {
    const sql = getSql();
    console.log("‚úÖ Connexion SQL obtenue");

    console.log("üìù Ex√©cution de la requ√™te SELECT...");
    const events = (await sql`
      SELECT id, date, user_name, user_color, created_at
      FROM events
      ORDER BY date ASC, created_at ASC
    `) as DbEvent[];

    console.log(
      `‚úÖ ${events.length} √©v√©nements r√©cup√©r√©s de la base de donn√©es:`,
      events
    );

    const mappedEvents = events.map((event) => ({
      date: event.date,
      user: {
        name: event.user_name,
        color: event.user_color,
      },
    }));

    console.log("‚úÖ √âv√©nements mapp√©s:", mappedEvents);
    return mappedEvents;
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des √©v√©nements:", error);
    console.error(
      "Stack trace:",
      error instanceof Error ? error.stack : "Pas de stack trace"
    );
    throw error;
  }
}

export async function addEvent(
  date: string,
  userName: string,
  userColor: string
): Promise<void> {
  console.log("üîß addEvent() appel√© avec:", { date, userName, userColor });
  try {
    const sql = getSql();
    console.log("‚úÖ Connexion SQL obtenue");

    console.log("üìù Ex√©cution de la requ√™te INSERT...");
    await sql`
      INSERT INTO events (date, user_name, user_color)
      VALUES (${date}, ${userName}, ${userColor})
      ON CONFLICT (date, user_name) DO NOTHING
    `;
    console.log("‚úÖ √âv√©nement ajout√© avec succ√®s");
  } catch (error) {
    console.error("‚ùå Erreur lors de l'ajout de l'√©v√©nement:", error);
    console.error(
      "Stack trace:",
      error instanceof Error ? error.stack : "Pas de stack trace"
    );
    throw error;
  }
}

export async function removeEvent(
  date: string,
  userName: string
): Promise<void> {
  console.log("üîß removeEvent() appel√© avec:", { date, userName });
  try {
    const sql = getSql();
    console.log("‚úÖ Connexion SQL obtenue");

    console.log("üìù Ex√©cution de la requ√™te DELETE...");
    await sql`
      DELETE FROM events
      WHERE date = ${date} AND user_name = ${userName}
    `;
    console.log("‚úÖ √âv√©nement supprim√© avec succ√®s");
  } catch (error) {
    console.error("‚ùå Erreur lors de la suppression de l'√©v√©nement:", error);
    console.error(
      "Stack trace:",
      error instanceof Error ? error.stack : "Pas de stack trace"
    );
    throw error;
  }
}

export async function saveAllEvents(events: DayEvent[]): Promise<void> {
  console.log("üîß saveAllEvents() appel√© avec:", events);
  try {
    const sql = getSql();
    console.log("‚úÖ Connexion SQL obtenue");

    // Supprimer tous les √©v√©nements existants
    console.log("üìù Suppression de tous les √©v√©nements existants...");
    await sql`DELETE FROM events`;
    console.log("‚úÖ Tous les √©v√©nements supprim√©s");

    // Ajouter tous les nouveaux √©v√©nements
    if (events.length > 0) {
      console.log("üìù Insertion des nouveaux √©v√©nements...");
      const values = events
        .map(
          (event) => `(${event.date}, ${event.user.name}, ${event.user.color})`
        )
        .join(", ");

      console.log("Valeurs √† ins√©rer:", values);
      await sql`INSERT INTO events (date, user_name, user_color) VALUES ${sql.unsafe(
        values
      )}`;
      console.log(`‚úÖ ${events.length} √©v√©nements ins√©r√©s avec succ√®s`);
    } else {
      console.log("‚ÑπÔ∏è Aucun √©v√©nement √† ins√©rer");
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de la sauvegarde des √©v√©nements:", error);
    console.error(
      "Stack trace:",
      error instanceof Error ? error.stack : "Pas de stack trace"
    );
    throw error;
  }
}
